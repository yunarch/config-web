{
  "openapi": "3.0.4",
  "info": { "title": "Swagger Petstore - OpenAPI 3.0", "version": "1.0.26" },
  "paths": {
    "/pet": {
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet.",
        "description": "Update an existing pet by Id.",
        "operationId": "updatePet",
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" },
          "422": { "description": "Validation exception" },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store.",
        "description": "Add a new pet to the store.",
        "operationId": "addPet",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Pet" }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "422": { "description": "Validation exception" },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status.",
        "description": "Multiple status values can be provided with comma separated strings.",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "available",
              "enum": ["available", "pending", "sold"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              }
            }
          },
          "400": { "description": "Invalid status value" },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags.",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": false,
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Pet" }
                }
              }
            }
          },
          "400": { "description": "Invalid tag value" },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID.",
        "description": "Returns a single pet.",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" },
          "default": { "description": "Unexpected error" }
        },
        "security": [
          { "api_key": [] },
          { "petstore_auth": ["write:pets", "read:pets"] }
        ]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data.",
        "description": "Updates a pet resource based on the form data.",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of pet that needs to be updated",
            "schema": { "type": "string" }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Status of pet that needs to be updated",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Pet" }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet.",
        "description": "Delete a pet.",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": { "type": "string" }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": { "description": "Pet deleted" },
          "400": { "description": "Invalid pet value" },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "Uploads an image.",
        "description": "Upload image of the pet.",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "description": "Additional Metadata",
            "required": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": { "type": "string", "format": "binary" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ApiResponse" }
              }
            }
          },
          "400": { "description": "No file uploaded" },
          "404": { "description": "Pet not found" },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status.",
        "description": "Returns a map of status codes to quantities.",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "default": { "description": "Unexpected error" }
        },
        "security": [{ "api_key": [] }]
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet.",
        "description": "Place a new order in the store.",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/Order" }
            },
            "application/xml": {
              "schema": { "$ref": "#/components/schemas/Order" }
            },
            "application/x-www-form-urlencoded": {
              "schema": { "$ref": "#/components/schemas/Order" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "400": { "description": "Invalid input" },
          "422": { "description": "Validation exception" },
          "default": { "description": "Unexpected error" }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID.",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of order that needs to be fetched",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Order" }
              },
              "application/xml": {
                "schema": { "$ref": "#/components/schemas/Order" }
              }
            }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" },
          "default": { "description": "Unexpected error" }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by identifier.",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or non-integers will generate API errors.",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "200": { "description": "order deleted" },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Order not found" },
          "default": { "description": "Unexpected error" }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "petId": { "type": "integer", "format": "int64", "example": 198772 },
          "quantity": { "type": "integer", "format": "int32", "example": 7 },
          "shipDate": { "type": "string", "format": "date-time" },
          "status": {
            "type": "string",
            "description": "Order Status",
            "example": "approved",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": { "type": "boolean" }
        },
        "xml": { "name": "order" }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 1 },
          "name": { "type": "string", "example": "Dogs" }
        },
        "xml": { "name": "category" }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64" },
          "name": { "type": "string" }
        },
        "xml": { "name": "tag" }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "type": "object",
        "properties": {
          "id": { "type": "integer", "format": "int64", "example": 10 },
          "name": { "type": "string", "example": "doggie" },
          "category": { "$ref": "#/components/schemas/Category" },
          "photoUrls": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "type": "string", "xml": { "name": "photoUrl" } }
          },
          "tags": {
            "type": "array",
            "xml": { "wrapped": true },
            "items": { "$ref": "#/components/schemas/Tag" }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": { "name": "pet" }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": { "type": "integer", "format": "int32" },
          "type": { "type": "string" },
          "message": { "type": "string" }
        },
        "xml": { "name": "##default" }
      }
    }
  }
}
